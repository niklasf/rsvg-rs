// This file was generated by gir (https://github.com/gtk-rs/gir @ f5fca82)
// from gir-files (https://github.com/gtk-rs/gir-files @ ec4c204)
// DO NOT EDIT

use DimensionData;
use Error;
use HandleFlags;
use PositionData;
use cairo;
use ffi;
use gdk_pixbuf;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Handle(Object<ffi::RsvgHandle, ffi::RsvgHandleClass>);

    match fn {
        get_type => || ffi::rsvg_handle_get_type(),
    }
}

impl Handle {
    pub fn new() -> Handle {
        unsafe {
            from_glib_full(ffi::rsvg_handle_new())
        }
    }

    pub fn new_from_data(data: &[u8]) -> Result<Handle, Error> {
        let data_len = data.len() as usize;
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::rsvg_handle_new_from_data(data.to_glib_none().0, data_len, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    pub fn new_from_file(file_name: &str) -> Result<Handle, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::rsvg_handle_new_from_file(file_name.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //pub fn new_from_gfile_sync<'a, P: IsA</*Ignored*/gio::File>, Q: Into<Option<&'a /*Ignored*/gio::Cancellable>>>(file: &P, flags: HandleFlags, cancellable: Q) -> Result<Handle, Error> {
    //    unsafe { TODO: call ffi::rsvg_handle_new_from_gfile_sync() }
    //}

    //pub fn new_from_stream_sync<'a, 'b, P: IsA</*Ignored*/gio::InputStream>, Q: IsA</*Ignored*/gio::File> + 'a, R: Into<Option<&'a Q>>, S: Into<Option<&'b /*Ignored*/gio::Cancellable>>>(input_stream: &P, base_file: R, flags: HandleFlags, cancellable: S) -> Result<Handle, Error> {
    //    unsafe { TODO: call ffi::rsvg_handle_new_from_stream_sync() }
    //}

    pub fn new_with_flags(flags: HandleFlags) -> Handle {
        unsafe {
            from_glib_full(ffi::rsvg_handle_new_with_flags(flags.to_glib()))
        }
    }
}

impl Default for Handle {
    fn default() -> Self {
        Self::new()
    }
}

pub trait HandleExt {
    fn close(&self) -> Result<(), Error>;

    fn get_dimensions(&self) -> DimensionData;

    fn get_dimensions_sub<'a, P: Into<Option<&'a str>>>(&self, id: P) -> Option<DimensionData>;

    fn get_pixbuf(&self) -> Option<gdk_pixbuf::Pixbuf>;

    fn get_pixbuf_sub<'a, P: Into<Option<&'a str>>>(&self, id: P) -> Option<gdk_pixbuf::Pixbuf>;

    fn get_position_sub(&self, id: &str) -> Option<PositionData>;

    fn has_sub(&self, id: &str) -> bool;

    //fn read_stream_sync<'a, P: IsA</*Ignored*/gio::InputStream>, Q: Into<Option<&'a /*Ignored*/gio::Cancellable>>>(&self, stream: &P, cancellable: Q) -> Result<(), Error>;

    fn render_cairo(&self, cr: &cairo::Context) -> bool;

    fn render_cairo_sub<'a, P: Into<Option<&'a str>>>(&self, cr: &cairo::Context, id: P) -> bool;

    //fn set_base_gfile<P: IsA</*Ignored*/gio::File>>(&self, base_file: &P);

    fn set_base_uri(&self, base_uri: &str);

    fn set_dpi(&self, dpi: f64);

    fn set_dpi_x_y(&self, dpi_x: f64, dpi_y: f64);

    fn write(&self, buf: &[u8]) -> Result<(), Error>;

    fn get_property_dpi_x(&self) -> f64;

    fn set_property_dpi_x(&self, dpi_x: f64);

    fn get_property_dpi_y(&self) -> f64;

    fn set_property_dpi_y(&self, dpi_y: f64);

    fn get_property_em(&self) -> f64;

    fn get_property_ex(&self) -> f64;

    fn get_property_flags(&self) -> HandleFlags;

    fn get_property_height(&self) -> i32;

    fn get_property_width(&self) -> i32;

    fn connect_property_dpi_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_dpi_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_em_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_ex_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Handle> + IsA<glib::object::Object>> HandleExt for O {
    fn close(&self) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::rsvg_handle_close(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn get_dimensions(&self) -> DimensionData {
        unsafe {
            let mut dimension_data = DimensionData::uninitialized();
            ffi::rsvg_handle_get_dimensions(self.to_glib_none().0, dimension_data.to_glib_none_mut().0);
            dimension_data
        }
    }

    fn get_dimensions_sub<'a, P: Into<Option<&'a str>>>(&self, id: P) -> Option<DimensionData> {
        let id = id.into();
        let id = id.to_glib_none();
        unsafe {
            let mut dimension_data = DimensionData::uninitialized();
            let ret = from_glib(ffi::rsvg_handle_get_dimensions_sub(self.to_glib_none().0, dimension_data.to_glib_none_mut().0, id.0));
            if ret { Some(dimension_data) } else { None }
        }
    }

    fn get_pixbuf(&self) -> Option<gdk_pixbuf::Pixbuf> {
        unsafe {
            from_glib_full(ffi::rsvg_handle_get_pixbuf(self.to_glib_none().0))
        }
    }

    fn get_pixbuf_sub<'a, P: Into<Option<&'a str>>>(&self, id: P) -> Option<gdk_pixbuf::Pixbuf> {
        let id = id.into();
        let id = id.to_glib_none();
        unsafe {
            from_glib_full(ffi::rsvg_handle_get_pixbuf_sub(self.to_glib_none().0, id.0))
        }
    }

    fn get_position_sub(&self, id: &str) -> Option<PositionData> {
        unsafe {
            let mut position_data = PositionData::uninitialized();
            let ret = from_glib(ffi::rsvg_handle_get_position_sub(self.to_glib_none().0, position_data.to_glib_none_mut().0, id.to_glib_none().0));
            if ret { Some(position_data) } else { None }
        }
    }

    fn has_sub(&self, id: &str) -> bool {
        unsafe {
            from_glib(ffi::rsvg_handle_has_sub(self.to_glib_none().0, id.to_glib_none().0))
        }
    }

    //fn read_stream_sync<'a, P: IsA</*Ignored*/gio::InputStream>, Q: Into<Option<&'a /*Ignored*/gio::Cancellable>>>(&self, stream: &P, cancellable: Q) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::rsvg_handle_read_stream_sync() }
    //}

    fn render_cairo(&self, cr: &cairo::Context) -> bool {
        unsafe {
            from_glib(ffi::rsvg_handle_render_cairo(self.to_glib_none().0, mut_override(cr.to_glib_none().0)))
        }
    }

    fn render_cairo_sub<'a, P: Into<Option<&'a str>>>(&self, cr: &cairo::Context, id: P) -> bool {
        let id = id.into();
        let id = id.to_glib_none();
        unsafe {
            from_glib(ffi::rsvg_handle_render_cairo_sub(self.to_glib_none().0, mut_override(cr.to_glib_none().0), id.0))
        }
    }

    //fn set_base_gfile<P: IsA</*Ignored*/gio::File>>(&self, base_file: &P) {
    //    unsafe { TODO: call ffi::rsvg_handle_set_base_gfile() }
    //}

    fn set_base_uri(&self, base_uri: &str) {
        unsafe {
            ffi::rsvg_handle_set_base_uri(self.to_glib_none().0, base_uri.to_glib_none().0);
        }
    }

    fn set_dpi(&self, dpi: f64) {
        unsafe {
            ffi::rsvg_handle_set_dpi(self.to_glib_none().0, dpi);
        }
    }

    fn set_dpi_x_y(&self, dpi_x: f64, dpi_y: f64) {
        unsafe {
            ffi::rsvg_handle_set_dpi_x_y(self.to_glib_none().0, dpi_x, dpi_y);
        }
    }

    fn write(&self, buf: &[u8]) -> Result<(), Error> {
        let count = buf.len() as usize;
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::rsvg_handle_write(self.to_glib_none().0, buf.to_glib_none().0, count, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn get_property_dpi_x(&self) -> f64 {
        unsafe {
            let mut value = Value::from_type(<f64 as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "dpi-x".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_dpi_x(&self, dpi_x: f64) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "dpi-x".to_glib_none().0, Value::from(&dpi_x).to_glib_none().0);
        }
    }

    fn get_property_dpi_y(&self) -> f64 {
        unsafe {
            let mut value = Value::from_type(<f64 as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "dpi-y".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_dpi_y(&self, dpi_y: f64) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "dpi-y".to_glib_none().0, Value::from(&dpi_y).to_glib_none().0);
        }
    }

    fn get_property_em(&self) -> f64 {
        unsafe {
            let mut value = Value::from_type(<f64 as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "em".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_ex(&self) -> f64 {
        unsafe {
            let mut value = Value::from_type(<f64 as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "ex".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_flags(&self) -> HandleFlags {
        unsafe {
            let mut value = Value::from_type(<HandleFlags as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "flags".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_height(&self) -> i32 {
        unsafe {
            let mut value = Value::from_type(<i32 as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "height".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn get_property_width(&self) -> i32 {
        unsafe {
            let mut value = Value::from_type(<i32 as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "width".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn connect_property_dpi_x_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::dpi-x",
                transmute(notify_dpi_x_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_dpi_y_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::dpi-y",
                transmute(notify_dpi_y_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_em_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::em",
                transmute(notify_em_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_ex_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::ex",
                transmute(notify_ex_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::flags",
                transmute(notify_flags_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::height",
                transmute(notify_height_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::width",
                transmute(notify_width_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_dpi_x_trampoline<P>(this: *mut ffi::RsvgHandle, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Handle> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Handle::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_dpi_y_trampoline<P>(this: *mut ffi::RsvgHandle, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Handle> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Handle::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_em_trampoline<P>(this: *mut ffi::RsvgHandle, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Handle> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Handle::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_ex_trampoline<P>(this: *mut ffi::RsvgHandle, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Handle> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Handle::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_flags_trampoline<P>(this: *mut ffi::RsvgHandle, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Handle> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Handle::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_height_trampoline<P>(this: *mut ffi::RsvgHandle, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Handle> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Handle::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_width_trampoline<P>(this: *mut ffi::RsvgHandle, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Handle> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Handle::from_glib_borrow(this).downcast_unchecked())
}
